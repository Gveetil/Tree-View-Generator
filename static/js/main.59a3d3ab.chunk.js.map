{"version":3,"sources":["data/largeSampleData.csv","data/smallSampleData.csv","components/Navbar.js","components/ListView/ListViewItem.js","utils/AppContext.js","components/ListView/index.js","pages/Homepage.js","components/VerticalTreeView/VTreeViewItem.js","components/VerticalTreeView/index.js","pages/VerticalTree.js","components/HorizontalTreeView/HTreeViewItem.js","components/HorizontalTreeView/index.js","pages/HorizontalTree.js","utils/TreeData.js","utils/TreeDataParser.js","App.js","index.js"],"names":["module","exports","withRouter","props","className","to","type","id","name","onChange","handleSizeChange","checked","sampleSizeSmall","htmlFor","getActiveClass","title","role","aria-hidden","value","location","pathname","ListViewItem","useState","showChildren","setShowChildren","key","children","length","href","onClick","event","preventDefault","total","toFixed","AppContextAction","AppContext","React","createContext","Provider","defaultState","treeData","reducer","state","action","AppProvider","useReducer","dispatch","useAppContext","useContext","ListView","renderTreeNodes","currentNode","nodes","childNodes","push","Homepage","class","VTreeViewItem","connectorClassName","isRoot","firstChild","lastChild","VerticalTreeView","useEffect","rootNode","document","querySelector","scrollIntoView","behavior","block","inline","totalChildren","Object","keys","VerticalTree","HTreeViewItem","HorizontalTreeView","HorizontalTree","TreeData","this","root","TreeNode","parentId","parentNode","findChildById","addChild","parent","Number","childId","updateTotal","node","result","useSmall","a","parseTreeData","loadFile","csvFilePathSmall","csvFilePathLarge","console","log","csvData","item","parent_id","filePath","Promise","resolve","reject","csvParser","header","download","skipEmptyLines","complete","results","data","error","loadSampleFile","App","setSampleSizeSmall","treeDataParser","loadSampleData","basename","process","smallSampleSelected","target","exact","path","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.59a3d3ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/largeSampleData.5fe0b2a8.csv\";","module.exports = __webpack_public_path__ + \"static/media/smallSampleData.2fed789d.csv\";","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\n// This component renders the top navigation bar\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar fixed-top navbar-dark bg-primary\" >\n            <Link to=\"/\" className=\"navbar-brand\">Tree View Generator</Link>\n            <div className=\"navbar-nav d-flex flex-row ml-auto\">\n                <div className=\"custom-control custom-radio pr-3 py-2\">\n                    <input type=\"radio\"\n                        className=\"custom-control-input\"\n                        id=\"smallSample\"\n                        name=\"smallSample\"\n                        onChange={props.handleSizeChange}\n                        checked={props.sampleSizeSmall} />\n                    <label className=\"custom-control-label\" htmlFor=\"smallSample\">Small Sample</label>\n                </div>\n                <div className=\"custom-control custom-radio pr-3 py-2\">\n                    <input type=\"radio\"\n                        className=\"custom-control-input\"\n                        id=\"largeSample\"\n                        name=\"largeSample\"\n                        onChange={props.handleSizeChange}\n                        checked={!props.sampleSizeSmall} />\n                    <label className=\"custom-control-label\" htmlFor=\"largeSample\">Large Sample</label>\n                </div>\n                <Link to=\"/vertical\"\n                    className={getActiveClass(\"/vertical\")}\n                    title=\"Vertical Tree View\"\n                    role=\"button\">\n                    <i className=\"fa fa-sitemap px-1 fa-lg\" aria-hidden=\"true\"></i></Link>\n                <Link to=\"/horizontal\"\n                    className={getActiveClass(\"/horizontal\")}\n                    title=\"Horizontal Tree View\"\n                    role=\"button\">\n                    <i className=\"fa fa-share-alt px-1 fa-lg\" aria-hidden=\"true\"></i></Link>\n                <Link to=\"/\"\n                    className={getActiveClass(\"/\")}\n                    title=\"List View\"\n                    role=\"button\">\n                    <i className=\"fa fa-list px-1 fa-lg\" aria-hidden=\"true\"></i></Link>\n            </div>\n        </nav >\n    )\n    function getActiveClass(value) {\n        return (props.location.pathname === value) ? \"nav-link active px-2\" : \"nav-link px-2\";\n    }\n}\n\nexport default withRouter(Navbar);","import React, { useState } from \"react\";\r\n\r\n// This component generates a list view item\r\nexport default function ListViewItem(props) {\r\n    const [showChildren, setShowChildren] = useState(true)\r\n\r\n    // Toggles show hide of child nodes\r\n    function handleClick(event) {\r\n        event.preventDefault()\r\n        setShowChildren(!showChildren)\r\n    }\r\n\r\n    return (\r\n        <div key={props.id} >\r\n            <div className=\"d-flex flex-row flex-nowrap mb-1 \">\r\n                {props.children && props.children.length > 0 &&\r\n                    <a href=\"/\" className=\"my-auto expand-button l-expand-offset\"\r\n                        onClick={handleClick}>\r\n                        {showChildren ?\r\n                            <i className=\"fa fa-minus-square\" aria-hidden=\"true\"></i>\r\n                            :\r\n                            <i className=\"fa fa-plus-square\" aria-hidden=\"true\"></i>}\r\n                    </a>}\r\n                <div className=\"tree-view-item ml-3 l-list-item\" title={props.name}>\r\n                    <div className=\"display-name\">{props.name}</div>\r\n                    <div className=\"display-value l-value-width\">{props.value}</div>\r\n                    <div className=\"display-total l-value-width\">{props.total.toFixed(2)}</div>\r\n                </ div>\r\n            </div>\r\n            {props.children && props.children.length > 0 && showChildren &&\r\n                <div className=\"d-flex flex-row flex-nowrap\">\r\n                    {props.children.length > 0 &&\r\n                        <div className=\"justify-content-stretch l-vertical-connector\">\r\n                        </ div>}\r\n                    < div key={props.id} className=\"d-flex flex-column flex-nowrap w-100 pl-3\">\r\n                        {props.children}\r\n                    </ div>\r\n                </div>}\r\n        </ div >)\r\n}\r\n","import React, { useReducer, useContext } from \"react\";\r\n\r\n// Enum of Action keys supported by this context  \r\nconst AppContextAction = {\r\n    LOAD_TREE_DATA: \"LOAD_TREE_DATA\",   // Load tree view data\r\n}\r\n\r\nconst AppContext = React.createContext();\r\nconst { Provider } = AppContext;\r\nconst defaultState = {\r\n    treeData: {},\r\n};\r\n\r\n// Reducer to make changes to the application context state\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case AppContextAction.LOAD_TREE_DATA: {\r\n            return {\r\n                ...state,\r\n                treeData: action.value,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Returns the Provider to be used when using the application context \r\nconst AppProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useReducer(reducer, defaultState);\r\n    return <Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\n// Returns the application context \r\nconst useAppContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n\r\nexport { AppProvider, useAppContext, AppContextAction };\r\n","import React from \"react\";\r\nimport ListViewItem from \"./ListViewItem\";\r\nimport { useAppContext } from \"../../utils/AppContext\";\r\nimport \"./style.css\";\r\n\r\n// This component generates the list view\r\nexport default function ListView() {\r\n    /* eslint-disable no-unused-vars */\r\n    const [state, _] = useAppContext();\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column pt-4 pl-3 flex-nowrap\">\r\n            {renderTreeNodes(state.treeData)}\r\n        </div>\r\n    );\r\n\r\n    // Loops through and renders list nodes \r\n    function renderTreeNodes(currentNode) {\r\n        const nodes = []\r\n        if (currentNode && currentNode.childNodes) {\r\n            for (let key in currentNode.childNodes) {\r\n                nodes.push(\r\n                    <ListViewItem\r\n                        key={key}\r\n                        {...currentNode.childNodes[key]}>\r\n                        {renderTreeNodes(currentNode.childNodes[key])}\r\n                    </ListViewItem>)\r\n            }\r\n        }\r\n        return nodes\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ListView from '../components/ListView';\r\n\r\n// This page displays the application homepage and loads the default list view\r\nexport default function Homepage(props) {\r\n\r\n    return (\r\n        <>\r\n\r\n            <h4 className=\"text-center pt-4 pb-2\">Tree List View </h4>\r\n            <hr class=\"my-auto mt-3\" />\r\n            <div className=\"container list-view-wrapper justify-content-center\">\r\n                <ListView />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\n// This component generates a vertical tree view item \r\nexport default function VTreeViewItem(props) {\r\n    const [showChildren, setShowChildren] = useState(true)\r\n    let connectorClassName = \"\";\r\n\r\n    // No connectors required for the root node\r\n    if (!props.isRoot) {\r\n        // If node is the only child\r\n        if (props.firstChild && props.lastChild)\r\n            connectorClassName = \"v-vertical-connector\";\r\n\r\n        // If node is the first child\r\n        else if (props.firstChild)\r\n            connectorClassName = \"v-left-connector\";\r\n\r\n        // If node is the last child\r\n        else if (props.lastChild)\r\n            connectorClassName = \"v-right-connector\";\r\n\r\n        // Node is in the middle \r\n        else\r\n            connectorClassName = \"v-horizontal-connector\";\r\n    }\r\n\r\n    // Toggles show hide of child nodes\r\n    function handleClick(event) {\r\n        event.preventDefault()\r\n        setShowChildren(!showChildren)\r\n    }\r\n\r\n    return (\r\n        <div key={props.id} className=\"d-flex flex-column\">\r\n            {connectorClassName &&\r\n                <div className={connectorClassName}>\r\n                </ div>}\r\n            <div className=\"px-2 text-center\">\r\n                <div className={`tree-view-item mx-auto ${props.isRoot ? \" rootnode\" : \"\"}`}\r\n                    id={`node${props.id}`}\r\n                    title={props.name}>\r\n                    <div className=\"display-name\">{props.name}</div>\r\n                    <div className=\"display-value\">{props.value}</div>\r\n                    <div className=\"display-total\">{props.total.toFixed(2)}</div>\r\n                </ div>\r\n            </div>\r\n            {props.children && props.children.length > 0 &&\r\n                <a href=\"/\" className=\"mx-auto expand-button v-expand-offset\"\r\n                    onClick={handleClick}>\r\n                    {showChildren ?\r\n                        <i className=\"fa fa-minus-square\" aria-hidden=\"true\"></i>\r\n                        :\r\n                        <i className=\"fa fa-plus-square\" aria-hidden=\"true\"></i>}\r\n                </a>}\r\n            {props.children && props.children.length > 0 && showChildren &&\r\n                (<>\r\n                    {props.children.length > 1 &&\r\n                        <div className=\"v-vertical-connector\">\r\n                        </ div>}\r\n                    <div key={props.id} className=\"d-flex flex-row flex-nowrap\">\r\n                        {props.children}\r\n                    </ div>\r\n                </>)\r\n            }\r\n        </ div >)\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport VTreeViewItem from \"./VTreeViewItem\";\r\nimport { useAppContext } from \"../../utils/AppContext\";\r\nimport \"./style.css\";\r\n\r\n// This component generates the vertical tree view\r\nexport default function VerticalTreeView() {\r\n    /* eslint-disable no-unused-vars */\r\n    const [state, _] = useAppContext();\r\n\r\n    // on load, scroll the root node into view \r\n    useEffect(() => {\r\n        const rootNode = document.querySelector(\".rootnode\");\r\n        if (rootNode) {\r\n            rootNode.scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"center\" });\r\n        }\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    });\r\n\r\n    return (\r\n        <div className=\"d-flex flex-row pt-4 pb-3 flex-nowrap mx-auto\">\r\n            {renderTreeNodes(state.treeData)}\r\n        </div>\r\n    );\r\n\r\n    // Loops through and renders tree nodes \r\n    function renderTreeNodes(currentNode) {\r\n        const nodes = []\r\n        if (currentNode && currentNode.childNodes) {\r\n            const totalChildren = Object.keys(currentNode.childNodes).length\r\n            for (let key in currentNode.childNodes) {\r\n                nodes.push(\r\n                    <VTreeViewItem\r\n                        key={key}\r\n                        firstChild={(nodes.length === 0)}\r\n                        lastChild={(nodes.length === totalChildren - 1)}\r\n                        {...currentNode.childNodes[key]}>\r\n                        {renderTreeNodes(currentNode.childNodes[key])}\r\n                    </VTreeViewItem>)\r\n            }\r\n        }\r\n        return nodes\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport VerticalTreeView from '../components/VerticalTreeView';\r\n\r\n// This page displays the sample data as a Vertical Tree view\r\nexport default function VerticalTree(props) {\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"text-center pt-4 pb-2\">Vertical Tree View </h4>\r\n            <hr class=\"my-auto mt-3\" />\r\n            <div className=\"scroll-wrapper\">\r\n                <VerticalTreeView />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\n// This component generates a horizontal tree view item \r\nexport default function HTreeViewItem(props) {\r\n    const [showChildren, setShowChildren] = useState(true)\r\n    let connectorClassName = \"\";\r\n\r\n    // No connectors required for the root node\r\n    if (!props.isRoot) {\r\n        // If node is the only child\r\n        if (props.firstChild && props.lastChild)\r\n            connectorClassName = \"h-horizontal-connector\";\r\n\r\n        // If node is the first child\r\n        else if (props.firstChild)\r\n            connectorClassName = \"h-bottom-connector\";\r\n\r\n        // If node is the last child\r\n        else if (props.lastChild)\r\n            connectorClassName = \"h-top-connector\";\r\n\r\n        // Node is in the middle \r\n        else\r\n            connectorClassName = \"h-vertical-connector\";\r\n    }\r\n\r\n    // Toggles show hide of child nodes\r\n    function handleClick(event) {\r\n        event.preventDefault()\r\n        setShowChildren(!showChildren)\r\n    }\r\n\r\n    return (\r\n        <div key={props.id} className=\"d-flex flex-row\">\r\n            {connectorClassName &&\r\n                <div className=\"inline-flex\">\r\n                    <div className={connectorClassName}>\r\n                    </ div>\r\n                </ div>}\r\n            <div className=\"py-2 my-auto\">\r\n                <div className={`tree-view-item h-auto ${props.isRoot ? \" rootnode\" : \"\"}`}\r\n                    id={`node${props.id}`}\r\n                    title={props.name}>\r\n                    <div className=\"display-name\">{props.name}</div>\r\n                    <div className=\"display-value\">{props.value}</div>\r\n                    <div className=\"display-total pr-2\">{props.total.toFixed(2)}</div>\r\n                </ div>\r\n            </div>\r\n            {props.children && props.children.length > 0 &&\r\n                <a href=\"/\" className=\"my-auto expand-button h-expand-offset\"\r\n                    onClick={handleClick}>\r\n                    {showChildren ?\r\n                        <i className=\"fa fa-minus-square\" aria-hidden=\"true\"></i>\r\n                        :\r\n                        <i className=\"fa fa-plus-square\" aria-hidden=\"true\"></i>}\r\n                </a>}\r\n            {\r\n                props.children && props.children.length > 0 && showChildren &&\r\n                (<>\r\n                    {props.children.length > 1 &&\r\n                        <div className=\"h-horizontal-connector\">\r\n                        </ div>}\r\n                    <div key={props.id} className=\"d-flex flex-column flex-nowrap\">\r\n                        {props.children}\r\n                    </ div>\r\n                </>)\r\n            }\r\n        </ div >)\r\n}\r\n","import React, { useEffect } from \"react\";\r\nimport HTreeViewItem from \"./HTreeViewItem\";\r\nimport { useAppContext } from \"../../utils/AppContext\";\r\nimport \"./style.css\";\r\n\r\n// This component generates the horizontal tree view\r\nexport default function HorizontalTreeView() {\r\n    /* eslint-disable no-unused-vars */\r\n    const [state, _] = useAppContext();\r\n\r\n    // on load, scroll the root node into view \r\n    useEffect(() => {\r\n        const rootNode = document.querySelector(\".rootnode\");\r\n        if (rootNode) {\r\n            rootNode.scrollIntoView({ behavior: \"smooth\", block: \"center\", inline: \"center\" });\r\n        }\r\n        //eslint-disable-next-line react-hooks/exhaustive-deps\r\n    });\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column pt-2 px-3 pb-2 flex-nowrap\">\r\n            {renderTreeNodes(state.treeData)}\r\n        </div>\r\n    );\r\n\r\n    // Loops through and renders tree nodes \r\n    function renderTreeNodes(currentNode) {\r\n        const nodes = []\r\n        if (currentNode && currentNode.childNodes) {\r\n            const totalChildren = Object.keys(currentNode.childNodes).length\r\n            for (let key in currentNode.childNodes) {\r\n                nodes.push(\r\n                    <HTreeViewItem\r\n                        key={key}\r\n                        firstChild={(nodes.length === 0)}\r\n                        lastChild={(nodes.length === totalChildren - 1)}\r\n                        {...currentNode.childNodes[key]}>\r\n                        {renderTreeNodes(currentNode.childNodes[key])}\r\n                    </HTreeViewItem>)\r\n            }\r\n        }\r\n        return nodes\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport HorizontalTreeView from '../components/HorizontalTreeView';\r\n\r\n// This page displays the sample data as a Horizontal Tree view\r\nexport default function HorizontalTree(props) {\r\n\r\n    return (\r\n        <>\r\n            <h4 className=\"text-center pt-4 pb-2\">Horizontal Tree View </h4>\r\n            <hr class=\"my-auto mt-3\" />\r\n            <div className=\"scroll-wrapper\">\r\n                <HorizontalTreeView />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","// Represents data in a tree structure\r\nexport default class TreeData {\r\n    constructor() {\r\n        this.root = new TreeNode()\r\n    }\r\n\r\n    // Adds a child to the tree\r\n    addChild(parentId, id, name, value) {\r\n        // Root node\r\n        if (!parentId || parentId === id) {\r\n            this.root.addChild(id, name, value)\r\n        } else {\r\n            // Find Parent Node\r\n            const parentNode = this.root.findChildById(parentId)\r\n            if (parentNode)\r\n                parentNode.addChild(id, name, value)\r\n        }\r\n    }\r\n}\r\n\r\n// Represents a node in the tree\r\nexport class TreeNode {\r\n    constructor(parent, id, name, value) {\r\n        this.parent = parent\r\n        this.id = id || 0;\r\n        this.name = name;\r\n        this.value = Number(value) || 0\r\n        this.total = this.value\r\n        this.childNodes = {};\r\n        this.isRoot = parent && parent.id > 0 ? false : true\r\n    }\r\n\r\n    // Adds a child to this node\r\n    addChild(childId, name, value) {\r\n        this.childNodes[childId] = new TreeNode(this, childId, name, value)\r\n        this.updateTotal()\r\n    }\r\n\r\n    // This method updates the total value for this node\r\n    updateTotal() {\r\n        this.total = this.value\r\n        // Sum up child node values too \r\n        for (const id in this.childNodes) {\r\n            this.total += this.childNodes[id].total;\r\n        }\r\n        // If a parent exists, update it's total as well\r\n        if (this.parent)\r\n            this.parent.updateTotal()\r\n    }\r\n\r\n    // Recursively finds a child node with the given id \r\n    findChildById(id) {\r\n        const node = this.childNodes[id]\r\n        // Node found\r\n        if (node)\r\n            return node\r\n\r\n        // Search within child nodes\r\n        for (const childId in this.childNodes) {\r\n            const result = this.childNodes[childId].findChildById(id)\r\n            // Node found \r\n            if (result)\r\n                return result\r\n        }\r\n        return null\r\n    }\r\n\r\n}","import { parse as csvParser } from 'papaparse'\r\nimport csvFilePathLarge from '../data/largeSampleData.csv'\r\nimport csvFilePathSmall from '../data/smallSampleData.csv'\r\nimport TreeData from './TreeData.js'\r\n\r\n// Loads and returns the sample tree data object\r\nasync function loadSampleFile(useSmall) {\r\n    try {\r\n        return parseTreeData(await loadFile(\r\n            useSmall ? csvFilePathSmall : csvFilePathLarge))\r\n    } catch (err) {\r\n        console.log(err)\r\n        return []\r\n    }\r\n}\r\n\r\n// Parses the default csv data object, constructs and returns a tree data object\r\nfunction parseTreeData(csvData) {\r\n    const treeData = new TreeData()\r\n    for (const item of csvData) {\r\n        treeData.addChild(item.parent_id, item.id, item.name, item.value)\r\n    }\r\n    return treeData.root\r\n}\r\n\r\n// Loads the given csv data file contents into an object \r\nasync function loadFile(filePath) {\r\n    return new Promise((resolve, reject) => {\r\n        csvParser(filePath, {\r\n            header: true,\r\n            download: true,\r\n            skipEmptyLines: true,\r\n            complete: (results) => resolve(results.data),\r\n            error: reject\r\n        })\r\n    })\r\n}\r\n\r\nexport default { loadSampleFile }","import React, { useEffect, useState } from 'react';\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Homepage from './pages/Homepage';\nimport VerticalTree from './pages/VerticalTree';\nimport HorizontalTree from './pages/HorizontalTree';\nimport { AppContextAction, useAppContext } from \"./utils/AppContext\";\nimport treeDataParser from './utils/TreeDataParser';\n\nfunction App() {\n  /* eslint-disable no-unused-vars */\n  const [state, dispatch] = useAppContext();\n  const [sampleSizeSmall, setSampleSizeSmall] = useState(true)\n\n  // Toggles size of the sample data\n  function handleSizeChange(event) {\n    const smallSampleSelected = (event.target.name === \"smallSample\")\n    setSampleSizeSmall(smallSampleSelected)\n  }\n\n  // Load sample tree view data on load of this page and when \n  // sample size selection changes\n  useEffect(() => {\n\n    async function loadSampleData() {\n      const treeData = await treeDataParser.loadSampleFile(sampleSizeSmall)\n      dispatch({\n        type: AppContextAction.LOAD_TREE_DATA,\n        value: treeData,\n      });\n    }\n\n    loadSampleData()\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sampleSizeSmall]);\n\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <Navbar sampleSizeSmall={sampleSizeSmall} handleSizeChange={handleSizeChange} />\n      <div className=\"page-navbar-offset\">\n        <Switch>\n          <Route exact path=\"/vertical\">\n            <VerticalTree />\n          </Route>\n          <Route exact path=\"/horizontal\">\n            <HorizontalTree />\n          </Route>\n          <Route path=\"/\">\n            <Homepage />\n          </Route>\n        </Switch>\n      </div>\n    </HashRouter >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { AppProvider } from \"./utils/AppContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}